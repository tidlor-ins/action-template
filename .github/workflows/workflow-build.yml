name: Reusable workflow example

on:
  workflow_call:
    inputs:
      imagename:
        required: true
        type: string
      buildtype:
        required: false
        default: docker
        type: string
    secrets:
      DOCKERHUB_USERNAME:
        required: true
      DOCKERHUB_PASSWORD:
        required: true
    outputs:
      imgname:
        value: ${{ jobs.build.outputs.output1 }}


jobs:
  build:
    runs-on: self-hosted
    outputs:
      output1: ${{ steps.step1.outputs.imgname }}
    steps:
    - uses: actions/checkout@v3
    - name: Set Tag
      run: echo "TAG=$(echo $GITHUB_SHA | cut -c 1-7)" >> $GITHUB_ENV;
    - id: step1
      run: echo "::set-output name=imgname::${{ inputs.imagename }}:${{ env.TAG }}"
    - name: Kaniko build
      uses: aevea/action-kaniko@master
      with:
        image: insuranceitteam/${{ inputs.imagename }}
        tag: ${{ env.TAG }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_PASSWORD }}
        cache: true
        cache_registry: insuranceitteam/${{ inputs.imagename }}
    - name: Checkout
      uses: actions/checkout@v3
    - name: Semantic Release
      uses: cycjimmy/semantic-release-action@v3
      id: semantic   # Need an `id` for output variables
      with:
        branches: |
          [
          '+([0-9])?(.{+([0-9]),x}).x',
          'master',
          'main',
          'dev',
          'next-major',
          {
            name: 'beta',
            prerelease: true
          },
          {
            name: 'alpha',
            prerelease: true
          }
          ]
        extra_plugins: |
            @semantic-release/git
            @semantic-release/changelog
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

    - name: Do something when a new release published
      if: steps.semantic.outputs.new_release_published == 'true'
      run: |
        echo ${{ steps.semantic.outputs.new_release_version }}
        echo ${{ steps.semantic.outputs.new_release_major_version }}
        echo ${{ steps.semantic.outputs.new_release_minor_version }}
        echo ${{ steps.semantic.outputs.new_release_patch_version }}


